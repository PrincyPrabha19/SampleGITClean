<ResourceDictionary x:Class="Dominator.Resources.Dictionaries.CommonDictionary"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"                    
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"                    
                    xmlns:system="clr-namespace:System;assembly=mscorlib" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:converters="clr-namespace:Dominator.Resources.Converters"
                    mc:Ignorable="d">

    <converters:ToUpperCaseConverter x:Key="toUpperCase" />

    <!-- BRUSHES -->
    <SolidColorBrush x:Key="AppBackgroundColor" Color="Black"/>
    <SolidColorBrush x:Key="SeparatorLineColor" Color="#7F2EB8FF"/>
    <SolidColorBrush x:Key="TextBlockHeaderColor" Color="#FF2EB8FF"/>
    <SolidColorBrush x:Key="TextBlockErrorColor" Color="#FFFF0500"/>
    <SolidColorBrush x:Key="DarkGrayColor" Color="#FF464646"/>
    <SolidColorBrush x:Key="LightGrayColor" Color="#FFCDCDCD"/>
    <SolidColorBrush x:Key="ParamGrayColor" Color="#FF898989"/>
    <SolidColorBrush x:Key="ProfileButtonUnselectedBorderColor" Color="#FF3E3F40"/>
    <SolidColorBrush x:Key="ProfileButtonUnselectedBackgroundColor" Color="Black"/>
    <SolidColorBrush x:Key="ProfileButtonSelectedBorderColor" Color="White"/>
    <SolidColorBrush x:Key="ProfileButtonInvalidBorderColor" Color="Red"/>
    <SolidColorBrush x:Key="ProfileButtonSelectedBackgroundColor" Color="#FF2EB8FF"/>
    <SolidColorBrush x:Key="NotifierBackgroundBrush" Color="#FF363636"/>
    <SolidColorBrush x:Key="NotifierTextBoxBorderBrush" Color="Transparent"/>
    <SolidColorBrush x:Key="NotifierTextInfoForegroundBrush" Color="White"/>
    <SolidColorBrush x:Key="NotifierTitleForegroundBrush" Color="Black"/>
    <SolidColorBrush x:Key="MetroButtonBackgroundIsMouseOverColor" Color="#FF2EB8FF"/>
    <SolidColorBrush x:Key="MetroButtonForegroundIsMouseOverColor" Color="White"/>
    <SolidColorBrush x:Key="MetroButtonBackgroundIsDefaultColor" Color="#FF2EB8FF"/>
    <SolidColorBrush x:Key="MetroButtonForegroundIsDefaultColor" Color="White"/>
    <SolidColorBrush x:Key="MetroButtonBackgroundIsDisabledColor" Color="#FF363636"/>
    <SolidColorBrush x:Key="MetroButtonForegroundIsDisabledColor" Color="#FF898989"/>
    <SolidColorBrush x:Key="MetroButtonBackgroundEnabledColor" Color="#FF363636"/>
    <SolidColorBrush x:Key="MetroButtonForegroundEnabledColor" Color="White"/>
    <SolidColorBrush x:Key="CheckboxNormalBorderColor" Color="#FF898989"/>
    <SolidColorBrush x:Key="CheckboxMouseOverBorderColor" Color="#FF2EB8FF"/>
    <SolidColorBrush x:Key="CheckboxCheckedStateColor" Color="#5CAD3E"/>
    <SolidColorBrush x:Key="CheckboxUndeterminatedStateColor" Color="#5CAD3E"/>
    <SolidColorBrush x:Key="CheckboxDisabledTextColor" Color="#FF898989"/>
    <!-- END BRUSHES -->

    <!-- FONTS -->
    <FontFamily x:Key="TextInfoFontFamily">/OCControls.Resources;component/Fonts/#Pill Gothic 600mg Light</FontFamily>
    <system:Double x:Key="TextInfoFontSize">13</system:Double>
    <system:Double x:Key="SmallTextInfoFontSize">9</system:Double>
    <system:Double x:Key="MesssageTitleFontSize">16</system:Double>
    <FontFamily x:Key="TextTitleFontFamily">/OCControls.Resources;component/Fonts/#Pill Gothic 600mg Semibd</FontFamily>
    <system:Double x:Key="TextTitleFontSize">13.333</system:Double>
    <!-- END FONTS -->

    <!-- GRADIENTS FOR: APPLICATION ACTION BUTTONS (LEFT MIDDLE RIGHT) -->
    <LinearGradientBrush x:Key="Fill_AppBlackBtt" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="Black" Offset="0.525"/>
        <GradientStop Color="#FF343434" Offset="0.51"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Stroke_AppBtt" EndPoint="0.505,0.114" StartPoint="0.5,0.99">
        <GradientStop Color="Black" Offset="0.339"/>
        <GradientStop Color="#FF868686" Offset="1"/>
    </LinearGradientBrush>

    <RadialGradientBrush x:Key="Fill_AppBlackBttOver" MappingMode="RelativeToBoundingBox" SpreadMethod="Pad" GradientOrigin="0.496,1.184">
        <RadialGradientBrush.RelativeTransform>
            <TransformGroup>
                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="2.066" ScaleY="1.432"/>
                <SkewTransform AngleX="0" AngleY="0" CenterX="0.5" CenterY="0.5"/>
                <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"/>
                <TranslateTransform X="0.054" Y="0.216"/>
            </TransformGroup>
        </RadialGradientBrush.RelativeTransform>
        <GradientStop Color="#002EB8FF" Offset="0.775"/>
        <GradientStop Color="#FF2EB8FF" Offset="0"/>
        <GradientStop Color="#B22EB8FF" Offset="0.421"/>
    </RadialGradientBrush>

    <LinearGradientBrush x:Key="Fill_AppBttMiddle" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="Black" Offset="1"/>
        <GradientStop Color="#FFAAAAAA"/>
        <GradientStop Color="#FF212121" Offset="0.553"/>
        <GradientStop Color="#FF4C4C4C" Offset="0.506"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="Stroke_AppBttMiddle" EndPoint="0.5,0.078" StartPoint="0.5,1.044">
        <GradientStop Color="Black" Offset="0.519"/>
        <GradientStop Color="#FF868686" Offset="1"/>
    </LinearGradientBrush>
    <!-- END GRADIENTS FOR: APPLICATION ACTION BUTTONS (LEFT MIDDLE RIGHT) -->

    <Style x:Key="XLargeTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBlockHeaderColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="17" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LargeTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBlockHeaderColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Setter Property="Padding" Value="0,2,0,0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MediumTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBlockHeaderColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MediumTextBlockNormal" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBlockHeaderColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource TextInfoFontFamily}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SmallTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBlockHeaderColor}"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CategoryTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ParamGrayColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CategoryValueTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#FFCCCCCC"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CategoryProfileTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ParamGrayColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CriticalErrorTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBlockErrorColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NotifierTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextBlockErrorColor}"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AdvancedFlow" BasedOn="{x:Null}" TargetType="{x:Type ContentControl}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <StackPanel Orientation="Vertical">
                        <Image x:Name="image1" Source="/OCControls.Resources;component/Media/Icons/white_arrow.png" Height="10" Width="20" HorizontalAlignment="Center" VerticalAlignment="Top" />
                        <Image x:Name="image2" Source="/OCControls.Resources;component/Media/Icons/blue_arrow.png" Height="10" Width="20" HorizontalAlignment="Center" VerticalAlignment="Bottom" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Source" TargetName="image1" Value="/OCControls.Resources;component/Media/Icons/blue_arrow.png"/>
                            <Setter Property="Source" TargetName="image2" Value="/OCControls.Resources;component/Media/Icons/blue_arrow.png"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ValidationTextBlock" BasedOn="{x:Null}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#FFFFFFFF"/>
        <Setter Property="FontFamily" Value="{StaticResource TextTitleFontFamily}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Padding" Value="0,2,0,0"/>
        <Setter Property="Height" Value="60"/>
        <EventSetter Event="ToolTipOpening" Handler="textBlock_ToolTipOpening"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="OnOffCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Viewbox>
                        <Grid MinWidth="100" MinHeight="20">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="0.5*"/>
                                <ColumnDefinition Width="0.5*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="borderOn" Grid.Column="0" HorizontalAlignment="Stretch" Background="white" Padding="2">
                                <TextBlock x:Name="textblockOn" Text="{Binding OnText, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="50" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource MediumTextBlock}" Margin="5,3,5,0" />
                            </Border>
                            <Border x:Name="borderOff" Grid.Column="1" HorizontalAlignment="Stretch" Background="#464646" Padding="2">
                                <TextBlock x:Name="textblockOff" Text="{Binding OffText, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="50" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource MediumTextBlock}" Margin="5,3,5,0" />
                            </Border>
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" TargetName="textblockOn" Value="Hidden"/>
                            <Setter Property="Background" TargetName="borderOff" Value="White"/>
                            <Setter Property="Background" TargetName="borderOn" Value="#464646"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="textblockOff" Value="Hidden"/>
                            <Setter Property="Foreground" TargetName="textblockOn" Value="White"/>
                            <Setter Property="Background" TargetName="borderOn" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TwoOptionsCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="borderOff" Grid.Column="0" HorizontalAlignment="Stretch" Background="{StaticResource DarkGrayColor}" Padding="2" d:LayoutOverrides="Height">
                            <TextBlock x:Name="textblockOff" Text="{Binding OffText, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource ParamGrayColor}" Style="{StaticResource MediumTextBlockNormal}" Margin="0,3,0,0" />
                        </Border>
                        <Border x:Name="borderOn" Grid.Column="1" HorizontalAlignment="Stretch" Background="{StaticResource ProfileButtonSelectedBackgroundColor}" Padding="2" d:LayoutOverrides="Height">
                            <TextBlock x:Name="textblockOn" Text="{Binding OnText, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" Style="{StaticResource MediumTextBlockNormal}" Margin="0,3,0,0" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" TargetName="borderOn" Value="{StaticResource DarkGrayColor}"/>
                            <Setter Property="Background" TargetName="borderOff" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                            <Setter Property="Foreground" TargetName="textblockOn" Value="{StaticResource ParamGrayColor}"/>
                            <Setter Property="Foreground" TargetName="textblockOff" Value="White"/>
                        </Trigger>
                        <!--<Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" TargetName="textblockOn" Value="White"/>
                            <Setter Property="Background" TargetName="borderOn" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TempCheckbox" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="borderOff" Grid.Column="0" HorizontalAlignment="Stretch" Background="{StaticResource DarkGrayColor}" Padding="2" d:LayoutOverrides="Height" CornerRadius="10,0,0,10">
                            <TextBlock x:Name="textblockOff" Text="{Binding OffText, RelativeSource={RelativeSource TemplatedParent}}" FontSize="8pt" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource ParamGrayColor}" Style="{StaticResource MediumTextBlockNormal}" Margin="0,3,0,0" />
                        </Border>
                        <Border x:Name="borderOn" Grid.Column="1" HorizontalAlignment="Stretch" Background="{StaticResource ProfileButtonSelectedBackgroundColor}" Padding="2" d:LayoutOverrides="Height" CornerRadius="0,10,10,0">
                            <TextBlock x:Name="textblockOn" Text="{Binding OnText, RelativeSource={RelativeSource TemplatedParent}}" FontSize="8pt" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" Style="{StaticResource MediumTextBlockNormal}" Margin="0,3,0,0" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" TargetName="borderOn" Value="{StaticResource DarkGrayColor}"/>
                            <Setter Property="Background" TargetName="borderOff" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                            <Setter Property="Foreground" TargetName="textblockOn" Value="{StaticResource ParamGrayColor}"/>
                            <Setter Property="Foreground" TargetName="textblockOff" Value="White"/>
                        </Trigger>
                        <!--<Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" TargetName="textblockOn" Value="White"/>
                            <Setter Property="Background" TargetName="borderOn" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DominatorCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" Value="Hidden"/>
                            <Setter Property="Background" Value="White"/>
                            <Setter Property="Background" Value="#464646"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Hidden"/>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="Background" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                        </Trigger>
                        <Trigger Property="CheckBox.IsMouseOver" Value="true">
                            <Setter Property = "Background" Value="Blue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolTipRebootStyle" TargetType="{x:Type ToolTip}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <StackPanel>
                        <Label Content="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" FontWeight="Bold" Background="Transparent" BorderBrush="Transparent" Foreground="White">
                        </Label>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- BUTTONS -->
    <Style x:Key="ProfileNameButton" BasedOn="{x:Null}" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="grid" Background="{StaticResource ProfileButtonUnselectedBackgroundColor}" ToolTipService.ShowOnDisabled="True">
                        <Border x:Name="border" BorderThickness="2" BorderBrush="{StaticResource ProfileButtonUnselectedBorderColor}">
                            <Grid x:Name="stackPanel">
                                <TextBlock x:Name="textBlock" Text="{Binding Content, Converter={StaticResource toUpperCase}, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type RadioButton}}}" Style="{StaticResource MediumTextBlock}" HorizontalAlignment="Stretch" VerticalAlignment="Center"  Margin="5,3,30,0" />
                                <Image x:Name="Image" Source="/OCControls.Resources;component/Media/Icons/Invalid.png" Visibility="Collapsed" Width="20" Height="20" HorizontalAlignment="Right" Margin="0,0,5,0"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="White"/>
                            <Setter Property="Background" TargetName="grid" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsValid}" Value ="False">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ProfileButtonInvalidBorderColor}"/>
                            <Setter Property="Visibility" TargetName="Image" Value="Visible"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="Gray"/>
                            <Setter Property="ToolTip" TargetName="grid"  Value="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="ToolTip.Background" TargetName="grid" Value="Transparent" />
                            <Setter Property="ToolTip.BorderBrush" TargetName="grid" Value="Transparent" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CategoryButton" BasedOn="{x:Null}" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="grid" Background="{StaticResource ProfileButtonUnselectedBackgroundColor}">
                        <Border x:Name="border" BorderThickness="2" BorderBrush="{StaticResource ProfileButtonUnselectedBorderColor}">
                            <StackPanel Orientation="Horizontal">
                                <Image Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" Width="25" Height="25" Margin="15,0,0,0"></Image>
                                <TextBlock x:Name="textBlock" Text="{Binding Content, Converter={StaticResource toUpperCase}, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type RadioButton}}}" Style="{StaticResource MediumTextBlock}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,3,5,0" />
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="White"/>
                            <Setter Property="Background" TargetName="grid" Value="{StaticResource ProfileButtonSelectedBackgroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource DarkGrayColor}"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="{StaticResource DarkGrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AddProfileButton" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Background="{StaticResource ProfileButtonUnselectedBackgroundColor}">
                        <Border x:Name="border" BorderThickness="2" BorderBrush="{StaticResource ProfileButtonUnselectedBorderColor}">
                            <TextBlock x:Name="textBlock" Text="{Binding Content, Converter={StaticResource toUpperCase}, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Button}}}" Style="{StaticResource LargeTextBlock}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="5,3,0,0" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource DarkGrayColor}"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="{StaticResource DarkGrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeleteProfileButton" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image x:Name="image" Source="/OCControls.Resources;component/Media/Icons/delete.png" Stretch="Fill" Width="20" Height="20" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditIconButton" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image x:Name="image" Source="/OCControls.Resources;component/Media/Icons/edit.png" Stretch="Fill" Width="20" Height="20" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ApplyIconButton" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image x:Name="image" Source="/OCControls.Resources;component/Media/Icons/apply.png" Stretch="Fill" Width="20" Height="20" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="image" Property="Source" Value="/OCControls.Resources;component/Media/Icons/apply_disabled.png"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CancelIconButton" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image x:Name="image" Source="/OCControls.Resources;component/Media/Icons/cancel.png" Stretch="Fill" Width="20" Height="20" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonAppLeft" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Height="34.092">
                        <Path Fill="{DynamicResource Fill_AppBlackBtt}" Stretch="Fill" Stroke="{DynamicResource Stroke_AppBtt}" StrokeThickness="1" x:Name="pathButton" Data="M43.535104,0.5 L118.5,0.5 118.5,34.5 0.5,34.5 C20.497189,17.765173 32.843475,-1.0723955 43.535104,0.5 z" Width="150" Height="34.092" HorizontalAlignment="Left" VerticalAlignment="Top">
                        </Path>
                        <Path Stretch="Fill" StrokeThickness="1" x:Name="pathBlueShadow" Data="M43.535104,0.5 L118.5,0.5 118.5,34.5 0.5,34.5 C20.497189,17.765173 32.843475,-1.0723955 43.535104,0.5 z" Fill="{DynamicResource Fill_AppBlackBttOver}" Visibility="Hidden" Stroke="{DynamicResource Stroke_AppBtt}" Width="150" Height="34.092" HorizontalAlignment="Left" VerticalAlignment="Top">
                        </Path>
                        <Label x:Name="label" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Right" Margin="0,3,10,0" VerticalAlignment="Center"  Foreground="{DynamicResource TextBlockHeaderColor}" Content="{TemplateBinding Content}" FontSize="14.667" Width="91.8" Height="28" FontFamily="{StaticResource TextInfoFontFamily}"/>
                        <Path Fill="#00000000" Stretch="Fill" Stroke="#00000000" StrokeThickness="1" x:Name="pathMouseOverZone" Data="M43.535104,0.5 L118.5,0.5 118.5,34.5 0.5,34.5 C20.497189,17.765173 32.843475,-1.0723955 43.535104,0.5 z" Width="150" Height="34.092" HorizontalAlignment="Left" VerticalAlignment="Top">
                        </Path>
                        <Rectangle HorizontalAlignment="Right" StrokeThickness="1" Width="1.063" Margin="0,1.1,0,1.914" Fill="Black"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="label" Value="#FF787878"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="pathMouseOverZone">
                            <Setter Property="Visibility" TargetName="pathBlueShadow" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonAppMiddle" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" HorizontalAlignment="Left" VerticalAlignment="Top">
                        <Path x:Name="button" Data="M0,0 L150,0 L150,34.092 L0,34.092 z" HorizontalAlignment="Left" Height="Auto" Stretch="Fill" StrokeThickness="1" Visibility="Visible" VerticalAlignment="Top" Width="Auto" Fill="{DynamicResource Fill_AppBlackBtt}" Stroke="{DynamicResource Stroke_AppBttMiddle}" />
                        <Path x:Name="pathBlueShadow" Data="M0,0 L150,0 L150,34.092 L0,34.092 z" Fill="{DynamicResource Fill_AppBlackBttOver}" HorizontalAlignment="Stretch" Stretch="Fill" StrokeThickness="1" Visibility="Hidden" VerticalAlignment="Stretch" />
                        <Label  x:Name="label" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="{DynamicResource TextBlockHeaderColor}" Padding="5,8,5,5" FontSize="14.667" FontFamily="{StaticResource TextInfoFontFamily}" VerticalAlignment="Stretch" Content="{TemplateBinding Content}" Width="Auto" HorizontalAlignment="Stretch" Margin="0"/>
                        <Path x:Name="pathMouseOverZone" Data="M0,0 L150,0 L150,34.092 L0,34.092 z" HorizontalAlignment="Left" Height="Auto" Stretch="Fill" StrokeThickness="1" Visibility="Visible" VerticalAlignment="Top" Width="Auto" Fill="#00000000" Stroke="#00000000" />
                        <Rectangle HorizontalAlignment="Right" StrokeThickness="1" Width="1" Margin="0,1,0,2.014" Fill="Black"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="pathMouseOverZone">
                            <Setter Property="Visibility" TargetName="pathBlueShadow" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="label" Value="#FF787878"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonAppRight" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
                        <Path Fill="{DynamicResource Fill_AppBlackBtt}" Stretch="Fill" Stroke="{DynamicResource Stroke_AppBtt}" StrokeThickness="1" Data="M43.535104,0.5 L118.5,0.5 118.5,34.5 0.5,34.5 C20.497189,17.765173 32.843475,-1.0723955 43.535104,0.5 z" RenderTransformOrigin="0.5,0.5" Margin="0,0,1,0" x:Name="pathButton" Width="150" Height="34.092">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path Fill="{DynamicResource Fill_AppBlackBttOver}" Stretch="Fill" StrokeThickness="1" Data="M43.535104,0.5 L118.5,0.5 118.5,34.5 0.5,34.5 C20.497189,17.765173 32.843475,-1.0723955 43.535104,0.5 z" RenderTransformOrigin="0.5,0.5" Visibility="Hidden" Stroke="{DynamicResource Stroke_AppBtt}" Margin="0,0,1,0" x:Name="pathBlueShadow" Width="150" Height="34.092">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Label x:Name="label" Content="{TemplateBinding Content}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="10,3,0,0"  Height="28" FontSize="14.667" FontFamily="{StaticResource TextInfoFontFamily}" Width="91.8" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="{DynamicResource TextBlockHeaderColor}"/>
                        <Path Fill="#00000000" Stretch="Fill" Stroke="#00000000" StrokeThickness="1" Data="M43.535104,0.5 L118.5,0.5 118.5,34.5 0.5,34.5 C20.497189,17.765173 32.843475,-1.0723955 43.535104,0.5 z" RenderTransformOrigin="0.5,0.5" Margin="0,0,1,0" x:Name="pathMouseOverZone" Width="150" Height="34.092">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="label" Value="#FF787878"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="pathMouseOverZone">
                            <Setter Property="Visibility" TargetName="pathBlueShadow" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="layout" Background="{StaticResource MetroButtonBackgroundEnabledColor}" RenderTransformOrigin="0.5,0.5">
                        <TextBlock x:Name="textBlock" Foreground="{StaticResource MetroButtonForegroundEnabledColor}" VerticalAlignment="Center" HorizontalAlignment="Center" MaxWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding ActualWidth}" FontFamily="{StaticResource TextInfoFontFamily}" FontSize="{TemplateBinding FontSize}" Text="{TemplateBinding Content}" Margin="0,2,0,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="Background" TargetName="layout" Value="{StaticResource MetroButtonBackgroundIsDefaultColor}"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="{StaticResource MetroButtonForegroundIsDefaultColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="layout" Value="{StaticResource MetroButtonBackgroundIsMouseOverColor}"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="{StaticResource MetroButtonForegroundIsMouseOverColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="RenderTransform" TargetName="layout">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0.97" ScaleY="0.97"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="layout" Value="{StaticResource MetroButtonBackgroundIsDisabledColor}"/>
                            <Setter Property="Foreground" TargetName="textBlock" Value="{StaticResource MetroButtonForegroundIsMouseOverColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="122"/>
        <Setter Property="FontFamily" Value="/OCControls.Resources;component/Fonts/#Pill Gothic 600mg Semibd"/>
    </Style>
    <!-- END BUTTONS -->

    <Style x:Key="ColourPickerButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColourSliderStyle" TargetType="{x:Type Slider}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="grid" Margin="0" Height="25">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" 
								Height="{TemplateBinding Height}" 
								MinHeight="20"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="1">
                            <Border Margin="0,3" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="#FF00CCFF" Height="15" />
                        </Border>
                        <Track Grid.Row="0" x:Name="PART_Track" Margin="0">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton 
										Style="{StaticResource ColourPickerButtonStyle}"
										Command="Slider.DecreaseLarge" BorderThickness="1" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb VerticalContentAlignment="Center" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="7" Height="25">
                                    <Thumb.Template>
                                        <ControlTemplate>
                                            <Grid>
                                                <Rectangle x:Name="thumbRect" Fill="#00CCFF" StrokeStartLineCap="Flat" RadiusX="5" RadiusY="5" Stroke="White" StrokeThickness="1"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton 
										Style="{StaticResource ColourPickerButtonStyle}"
										Command="Slider.IncreaseLarge" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="grid" Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OverallOCColourSliderStyle" TargetType="{x:Type Slider}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="grid" Margin="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" MinHeight="20" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" 
								Height="{TemplateBinding Height}" 
								MinHeight="20"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="1">
                            <Border Margin="0,2" Background="{TemplateBinding Background}" />
                        </Border>
                        <Track Grid.Row="0" x:Name="PART_Track" Margin="0">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton 
										Style="{StaticResource ColourPickerButtonStyle}"
										Command="Slider.DecreaseLarge" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb VerticalContentAlignment="Top" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="12">
                                    <Thumb.Template>
                                        <ControlTemplate>
                                            <Grid>
                                                <Rectangle x:Name="thumbRect" Fill="#FF2EB8FF" StrokeStartLineCap="Flat" />
                                            </Grid>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton 
										Style="{StaticResource ColourPickerButtonStyle}"
										Command="Slider.IncreaseLarge" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- FLAT COMBOBOX -->
    <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#FFA4A2A2" />
    <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#000" />
    <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
    <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

    <Style TargetType="ComboBoxItem">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="Black"/>
    </Style>

    <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="40" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" Name="Border"
                          BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" 
                          CornerRadius="0" BorderThickness="1, 1, 1, 1" 
                          Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
            <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder"
                          CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
                          Background="{StaticResource ComboBoxNormalBackgroundBrush}" Width="38" />

            <Path Name="Arrow" Grid.Column="1" 
                        Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                        HorizontalAlignment="Center" Fill="#FFAEAEAE"
                        VerticalAlignment="Center" Width="10" RenderTransformOrigin="0.5,0.5" >
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <!--<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>-->
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="White"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <!--<Setter Property="Panel.Background" TargetName="ButtonBorder" Value="WhiteSmoke"/>-->
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                                    ClickMode="Press" Focusable="False"
                                    IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                    Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                        <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                                      HorizontalAlignment="Left" VerticalAlignment="Center"                              
                                      Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                      ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox Name="PART_EditableTextBox" Margin="3,3,23,3"                     
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     Visibility="Hidden" Background="Transparent"
                                     HorizontalAlignment="Left" VerticalAlignment="Center"
                                     Focusable="True">
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom"
                                   Focusable="False" AllowsTransparency="True"
                                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                                   PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                                        MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                        MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Background="Black" Margin="0, 1, 0, 0"
                                            CornerRadius="0" BorderThickness="1,1,1,1" 
                                            BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"/>
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- END OF FLAT COMBOBOX -->

    <!-- REGULAR CHECKBOX-->
    <Style x:Key="RegularCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" BorderBrush="{DynamicResource CheckboxNormalBorderColor}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{DynamicResource CheckboxCheckedStateColor}" Margin="1" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource CheckboxUndeterminatedStateColor}" Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <TextBlock x:Name="contentPresenter" Grid.Column="1" Focusable="False" VerticalAlignment="Center" HorizontalAlignment="Left" FontFamily="{StaticResource TextInfoFontFamily}" FontSize="{TemplateBinding FontSize}" TextTrimming="CharacterEllipsis" Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" Margin="5,2,0,0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource CheckboxMouseOverBorderColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource CheckboxDisabledTextColor}"/>
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource LightGrayColor}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource CheckboxDisabledTextColor}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource CheckboxDisabledTextColor}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource CheckboxMouseOverBorderColor}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- END REGULAR CHECKBOX-->

    <!-- BEGIN CUSTOM CHROMEBORDER -->

    <Style x:Key="CustomChromeMinimize" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="Root" Background="Transparent" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition From="Pressed" GeneratedDuration="0" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="hover">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="down">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Root">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Image x:Name="normal" Width="32" Source="/OCControls.Resources;component/Media/Icons/minimize_normal.png" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Image x:Name="hover" Width="32" Source="/OCControls.Resources;component/Media/Icons/minimize_hover.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                        <Image x:Name="down" Width="32" Source="/OCControls.Resources;component/Media/Icons/minimize_down.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomChromeRestore" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="Root" Background="Transparent" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition From="Pressed" GeneratedDuration="0" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="hover">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="down">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Root">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.495"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Image x:Name="normal" Width="32" Source="/OCControls.Resources;component/Media/Icons/restore_normal.png" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Image x:Name="hover" Width="32" Source="/OCControls.Resources;component/Media/Icons/restore_hover.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                        <Image x:Name="down" Width="32" Source="/OCControls.Resources;component/Media/Icons/restore_down.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomChromeMaximize" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="Root" Background="Transparent" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition From="Pressed" GeneratedDuration="0" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="hover">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="down">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Root">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Image x:Name="normal" Width="32" Source="/OCControls.Resources;component/Media/Icons/maximize_normal.png" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Image x:Name="hover" Width="32" Source="/OCControls.Resources;component/Media/Icons/maximize_hover.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                        <Image x:Name="down" Width="32" Source="/OCControls.Resources;component/Media/Icons/maximize_down.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomChromeClose" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="Root" Background="Transparent" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition From="Pressed" GeneratedDuration="0" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="hover">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="down">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Root">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Image x:Name="normal" Width="32" Source="/OCControls.Resources;component/Media/Icons/close_normal.png" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Image x:Name="hover" Width="32" Source="/OCControls.Resources;component/Media/Icons/close_hover.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                        <Image x:Name="down" Width="32" Source="/OCControls.Resources;component/Media/Icons/close_down.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- END CUSTOM CHROMEBORDER -->

</ResourceDictionary>